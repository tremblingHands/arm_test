pipeline {
    agent {
        label "vmware-190"
    }
    stages {
        stage('ResetBIOS') {
            steps{
                script{
                    def servers = params.servers.split(' ').toList()
                    def clients = params.clients.split(' ').toList()
                    def deploy_nodes = servers + clients
                    deploy_nodes.unique()
                    for (server in deploy_nodes) {
                        stage(server){
                            agent {label "vmware-190"}
                            dir("scripts") {
                                git credentialsId: 'Gitlab', url: 'git@gitlab.hj-micro.com:appsoftware/scripts.git'
                            }
                            sh """
                               cd scripts
                               ip=\$(grep '${server}' /etc/hosts | awk '{ print \$1; }' | cut -d/ -f1)
                               python3 bios/bios.py --ability common --server_ip \$ip --reboot true --attributes '{}'
                               echo "Waiting for reboot"
                               sleep 600s
                               for i in {1..10}
                               do
                                   {
                                       ping ${server} -c 3 && break
                                   } || {
                                       sleep 120s
                                   }
                               done
                            """
                        }
                    }
                }
            }
        }
        stage('Prepare Environment') {
            agent {label "vmware-190"}
            steps{
                script{
                    def servers = params.servers.split(' ').toList()
                    def clients = params.clients.split(' ').toList()
                    def deploy_nodes = servers + clients
                    deploy_nodes.unique()
                    for (server in deploy_nodes) {
                        def stage_name = "Generate ssh key on ${server}"
                        stage(stage_name){
                            node(server) {
                                sh """
                                    if [ ! -e ~/.ssh/id_rsa ]; then
                                        ssh-keygen -A
                                        ssh-keygen -t rsa -P "" -f ~/.ssh/id_rsa
                                    fi
                                """
                            }
                        }
                    }

                    def stage_name = 'Copy SSH Keys' 
                    stage(stage_name){
                        agent {label "vmware-190"}
                        sh """
                            cpu_vendor=\$(lscpu|grep 'Model name:'|grep -v BIOS |awk -F ':' '{print \$2}'|tr -s ' ')
                            arch=\$(uname -m)
                            echo '-----------------------------------------'
                            echo 'execute on \$cpu_vendor'
                            if [ ! -e ~/.ssh/id_rsa ]; then
                                ssh-keygen -A
                                ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa
                                cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
                                chmod 0600 ~/.ssh/authorized_keys
                                echo 'StrictHostKeyChecking no' >>/etc/ssh/ssh_config
                            else
                                echo 'ssh id_rsa exits!'
                            fi
                            
                            wget -q http://10.1.180.190/storage/ssh-secret.sh
                            for client in ${params.clients}; do
                                expect ssh-secret.sh \$client
                                ssh root@\$client "curl http://gitlab.hj-micro.com/ceph/cbt/-/blob/master/requirements.txt -o requirements.txt"
                                ssh root@\$client \"curl -s http://gitlab.hj-micro.com/ceph/cbt/-/raw/master/setup.sh | sh -s -- client\"
                            done
    
                            for server in ${params.servers}; do
                                expect ssh-secret.sh \$server
                                ssh root@\$server \"curl -s http://gitlab.hj-micro.com/ceph/cbt/-/raw/master/setup.sh | sh\"
                            done
                        """
                    }
                }
            }
        }
        stage('Run Benchmark') {
            agent {label "vmware-190"}
            steps {
                script{
                    dir("cbt") {
                        git credentialsId: 'Gitlab', url: 'git@gitlab.hj-micro.com:ceph/cbt.git'
                    }
                    sh """
                        cd cbt
                        sh setup.sh
                        ./test -j allinone -b librbdfio -c "${params.clients}" -s "${params.servers}" -m bw
                        ./stop_all.sh ${params.clients} 2>/dev/null
                        ./stop_all.sh ${params.servers} 2>/dev/null
                    """
                }

                archiveArtifacts artifacts: 'cbt/target/*.tar.gz', fingerprint: true
            }
        }
    }
}
