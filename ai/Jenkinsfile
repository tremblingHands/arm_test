pipeline {
    parameters {
        choice choices: ['10.1.180.16', '10.1.180.2', '10.1.180.11', '10.1.180.15'], name: 'server'
    }
    agent {label server}
   stages {
       stage('ENVPrepare') {
            steps {
                sh '''
                yum -y install gcc-toolset-10-*
                yum install -y git  openssl-devel bzip2-devel libffi-devel zlib-devel wget unzip xz-devel python39-pip python39 libjpeg-devel libpng-devel mesa-libGL numactl  gcc python39-devel ncurses-devel
                yum remove -y python3
                pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple
                wget http://10.1.180.190/ai/postsilicon_test/post_silicon_requirement.txt
                pip3 install -r post_silicon_requirement.txt
                yum install -y openssl-devel bzip2-devel libffi-devel zlib-devel wget xz-devel
                CMAKE_VERSION=3.26.0
                CMAKE_TAR="v$CMAKE_VERSION.tar.gz"
                CMAKE_BUILD_DIR="CMake-$CMAKE_VERSION"
                source /opt/rh/gcc-toolset-10/enable
                export CC=/opt/rh/gcc-toolset-10/root/usr/bin/gcc
                export CXX=/opt/rh/gcc-toolset-10/root/usr/bin/g++
                echo "Downloading CMake $CMAKE_VERSION..."
                wget http://10.1.180.190/common/v$CMAKE_VERSION.tar.gz
                tar -xzvf $CMAKE_TAR
                cd $CMAKE_BUILD_DIR
                ./configure
                make -j
                make install
                cmake --version
                cd ..
                rm -rf $CMAKE_BUILD_DIR
                rm v3.26.0.tar.gz
                '''
            }
        }
        stage('BuildOnnxRuntime') {
            steps {
                sh '''
                wget http://10.1.180.190/ai/ONNXRUNTIME_v1.17.1.tar.gz
                tar -xvf ONNXRUNTIME_v1.17.1.tar.gz
                cd onnxruntime
                source /opt/rh/gcc-toolset-10/enable
                gcc --version
                ./build.sh --config Release --build_shared_lib --parallel --allow_running_as_root --skip_tests
                '''
            }
        }
        stage('RunPerformanceTest') {
            steps {
                sh '''
                export HF_ENDPOINT=https://hf-mirror.com
                wget http://10.1.180.190/ai/postsilicon_test/arm_performance_test.sh
                chmod 777 arm_performance_test.sh
                wget http://10.1.180.190/ai/postsilicon_test/run_performance_test.sh
                wget http://10.1.180.190/ai/postsilicon_test/x86_performance_test.sh
                wget http://10.1.180.190/ai/postsilicon_test/resnet50_onnxruntime_test.py
                wget http://10.1.180.190/ai/postsilicon_test/resnet50.onnx
                wget http://10.1.180.190/ai/postsilicon_test/models.zip
                unzip models.zip
                chmod 777 x86_performance_test.sh
                bash run_performance_test.sh
                '''
            }
        }
    }   

   post {
        always{
            cleanWs()
       }
	    success {
	        sh '''
                echo done
	           '''
	    }
	}
}pipeline {
    parameters {
        choice choices: ['10.1.180.16', '10.1.180.2', '10.1.180.11', '10.1.180.15'], name: 'server'
    }
    agent {label server}
   stages {
       stage('ENVPrepare') {
            steps {
                sh '''
                yum -y install gcc-toolset-10-*
                yum install -y git  openssl-devel bzip2-devel libffi-devel zlib-devel wget unzip xz-devel python39-pip python39 libjpeg-devel libpng-devel mesa-libGL numactl  gcc python39-devel ncurses-devel
                yum remove -y python3
                pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple
                wget http://10.1.180.190/ai/postsilicon_test/post_silicon_requirement.txt
                pip3 install -r post_silicon_requirement.txt
                yum install -y openssl-devel bzip2-devel libffi-devel zlib-devel wget xz-devel
                CMAKE_VERSION=3.26.0
                CMAKE_TAR="v$CMAKE_VERSION.tar.gz"
                CMAKE_BUILD_DIR="CMake-$CMAKE_VERSION"
                source /opt/rh/gcc-toolset-10/enable
                export CC=/opt/rh/gcc-toolset-10/root/usr/bin/gcc
                export CXX=/opt/rh/gcc-toolset-10/root/usr/bin/g++
                echo "Downloading CMake $CMAKE_VERSION..."
                wget http://10.1.180.190/common/v$CMAKE_VERSION.tar.gz
                tar -xzvf $CMAKE_TAR
                cd $CMAKE_BUILD_DIR
                ./configure
                make -j
                make install
                cmake --version
                cd ..
                rm -rf $CMAKE_BUILD_DIR
                rm v3.26.0.tar.gz
                '''
            }
        }
        stage('BuildOnnxRuntime') {
            steps {
                sh '''
                wget http://10.1.180.190/ai/ONNXRUNTIME_v1.17.1.tar.gz
                tar -xvf ONNXRUNTIME_v1.17.1.tar.gz
                cd onnxruntime
                source /opt/rh/gcc-toolset-10/enable
                gcc --version
                ./build.sh --config Release --build_shared_lib --parallel --allow_running_as_root --skip_tests
                '''
            }
        }
        stage('RunPerformanceTest') {
            steps {
                sh '''
                export HF_ENDPOINT=https://hf-mirror.com
                wget http://10.1.180.190/ai/postsilicon_test/arm_performance_test.sh
                chmod 777 arm_performance_test.sh
                wget http://10.1.180.190/ai/postsilicon_test/run_performance_test.sh
                wget http://10.1.180.190/ai/postsilicon_test/x86_performance_test.sh
                wget http://10.1.180.190/ai/postsilicon_test/resnet50_onnxruntime_test.py
                wget http://10.1.180.190/ai/postsilicon_test/resnet50.onnx
                wget http://10.1.180.190/ai/postsilicon_test/models.zip
                unzip models.zip
                chmod 777 x86_performance_test.sh
                bash run_performance_test.sh
                '''
            }
        }
    }   

   post {
        always{
            cleanWs()
       }
	    success {
	        sh '''
                echo done
	           '''
	    }
	}
}
