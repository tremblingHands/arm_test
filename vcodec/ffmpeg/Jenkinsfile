pipeline {
    agent {label "${agent}"}
    parameters {
        string defaultValue: '10.1.180.11', name: 'agent'
    }
    options { timeout(time: 180, unit: 'MINUTES') }
    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    dir("scripts") {
                        git credentialsId: 'Gitlab', url: 'git@gitlab.hj-micro.com:appsoftware/scripts.git'
                    }
                    sh "yum install -y gcc-toolset-10 perf perl cmake unzip bzip2 patch expect numactl ipmitool OpenIPMI"
                }
            }
        }
        stage('Build FFmpeg') {
            steps {
                script {
                    def buildFFmpeg = {
                        sh '''
                            source /opt/rh/gcc-toolset-10/enable
                            NUM_CPU_CORES=$(nproc)

                            cd "${WORKSPACE}"

                            if [ ! -d "ffmpeg_" ]; then
                                mkdir -p ffmpeg_

                                wget http://10.1.180.190/videocodec/ffmpeg/ffmpeg-7.0.tar.xz  
                                wget http://10.1.180.190/videocodec/ffmpeg/x264-7ed753b10a61d0be95f683289dfb925b800b0676.zip  
                                wget http://10.1.180.190/videocodec/ffmpeg/x265_3.6.tar.gz  
                                wget http://10.1.180.190/videocodec/ffmpeg/vbench-02.zip  

                                wget http://10.1.180.190/videocodec/ffmpeg/nasm-2.16.03.tar.gz  
                                tar xzvf nasm-2.16.03.tar.gz
                                cd nasm-2.16.03 && ./configure && make -j && make install 
                                cd - && rm -rf nasm*

                                wget http://10.1.180.190/videocodec/ffmpeg/yasm-1.3.0.tar.gz  
                                tar xzvf yasm-1.3.0.tar.gz
                                cd yasm-1.3.0 && ./configure && make -j && make install
                                cd - && rm -rf yasm*

                                tar -xf ffmpeg-7.0.tar.xz
                                unzip -o x264-7ed753b10a61d0be95f683289dfb925b800b0676.zip
                                tar -xf x265_3.6.tar.gz

                                export PKG_CONFIG_PATH=""${WORKSPACE}"/ffmpeg_/lib/pkgconfig"
                                cd "${WORKSPACE}"/x264-7ed753b10a61d0be95f683289dfb925b800b0676
                                ./configure --prefix="${WORKSPACE}"/ffmpeg_/ --enable-static --enable-lto --enable-pic
                                make -j $NUM_CPU_CORES
                                make install
                                cd "${WORKSPACE}" && rm -rf x264*

                                cd "${WORKSPACE}"/x265_3.6/build
                                cmake ../source/ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${WORKSPACE}"/ffmpeg_/
                                make -j $NUM_CPU_CORES
                                make install
                                cd "${WORKSPACE}" && rm -rf x265*

                                cd "${WORKSPACE}"/ffmpeg-7.0/
                                ./configure --disable-zlib --disable-doc --prefix="${WORKSPACE}"/ffmpeg_/ --extra-cflags="-I"${WORKSPACE}"/ffmpeg_/include" --extra-ldflags="-L"${WORKSPACE}"/ffmpeg_/lib -ldl" --bindir=""${WORKSPACE}"/ffmpeg_/bin" --pkg-config-flags="--static" --enable-gpl --enable-libx264 --enable-libx265
                                make -j $NUM_CPU_CORES
                                
                                make install
                                cd "${WORKSPACE}" && rm -rf ffmpeg-7.0*
                                
                                unzip -o vbench-02.zip
                            fi
                        '''
                    }
                    buildFFmpeg()
                }
            }
        }
        stage('Run Benchmark') {
            steps {
                script {
                    sh '''
                    cd "${WORKSPACE}"
                    datetime_dir=$(date +%Y%m%d%H%M%S)
                    mkdir -p ${datetime_dir}/tmp && cd ${datetime_dir}

                    echo 3 > "/proc/sys/vm/drop_caches"
                    echo always > "/sys/kernel/mm/transparent_hugepage/enabled"
                        
                    export PATH="${WORKSPACE}/ffmpeg_/bin:$PATH"
                    export LD_LIBRARY_PATH="${WORKSPACE}/ffmpeg_/lib/:$LD_LIBRARY_PATH"
                    
                    export VBENCH_ROOT="${WORKSPACE}/vbench/"
                    python3 ${WORKSPACE}/vbench/code/post-silicon-test.py --output_dir=${WORKSPACE}/${datetime_dir}/tmp --encoder=libx265 --socket_id='0' --ffmpeg_dir=${WORKSPACE}/ffmpeg_/bin/ --mode=total > total.log 2>&1
                    python3 ${WORKSPACE}/vbench/code/post-silicon-test.py --output_dir=${WORKSPACE}/${datetime_dir}/tmp --encoder=libx265 --socket_id='0' --ffmpeg_dir=${WORKSPACE}/ffmpeg_/bin/ --mode=scaling > scaling.log 2>&1
                        
                    python3 ${WORKSPACE}/vbench/code/post-silicon-test.py --output_dir=${WORKSPACE}/${datetime_dir}/tmp --encoder=libx265 --socket_id='0' --ffmpeg_dir=${WORKSPACE}/ffmpeg_/bin/ --mode=power > power0.log 2>&1
                    python3 ${WORKSPACE}/vbench/code/post-silicon-test.py --output_dir=${WORKSPACE}/${datetime_dir}/tmp --encoder=libx265 --socket_id='1' --ffmpeg_dir=${WORKSPACE}/ffmpeg_/bin/ --mode=power > power1.log 2>&1
                    python3 ${WORKSPACE}/vbench/code/post-silicon-test.py --output_dir=${WORKSPACE}/${datetime_dir}/tmp --encoder=libx265 --socket_id='0,1' --ffmpeg_dir=${WORKSPACE}/ffmpeg_/bin/ --mode=power > power0_1.log 2>&1

                    cd "${WORKSPACE}"/scripts/topdown
                    python3 perf_metrics.py -C 1 --command 'numactl --physcpubind 1 --membind 0 ffmpeg -hwaccel auto -y -hide_banner -i "${WORKSPACE}"/vbench/videos/crf0/new_chicken_3840x2160_30.mkv -c:v libx265 -x265-params \"frame-threads=1:no-wpp=1\" -preset medium -vtag hvc1 -loglevel info -f mp4 "${WORKSPACE}"/"${datetime_dir}"/tmp/chicken_3840x2160_30.mp4' > perf_metrics.log 2>&1
                    mv *.log *.csv  "${WORKSPACE}/${datetime_dir}/"
                    cd -
                    
                    cd "${WORKSPACE}"/scripts/os
                    python3 os_parameter.py 
                    mv os_parameter.json "${WORKSPACE}/${datetime_dir}/"
                    cd -
                    
                    current_ip=$(hostname -I|awk -F " " '{print $1}')
                    mkdir -p /nas/wiki.deng/postsillicon/results/${datetime_dir}/$current_ip
                    cp -rf ${WORKSPACE}/${datetime_dir}/*  /nas/wiki.deng/postsillicon/results/${datetime_dir}/$current_ip/
                    
                    rm -rf ${WORKSPACE}/${datetime_dir}/tmp
                    echo "run benchmark end!!!"
                        
                    '''
                }
            }
        }
    }
}